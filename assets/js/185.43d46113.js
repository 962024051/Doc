(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{537:function(t,e,l){"use strict";l.r(e);var a=l(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"tsconfig-json"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json"}},[t._v("#")]),t._v(" tsconfig.json")]),t._v(" "),l("p",[l("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文"),l("OutboundLink")],1)]),t._v(" "),l("p",[l("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文"),l("OutboundLink")],1)]),t._v(" "),l("div",{staticClass:"language-js extra-class"},[l("pre",{pre:!0,attrs:{class:"language-js"}},[l("code",[l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"compilerOptions"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Basic Options */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es5"')]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                          "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* target用于指定编译之后的版本目标 version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commonjs"')]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                     "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lib"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es6"')]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                             "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* lib用于指定要包含在编译中的库文件，这个我们在前面的课程中讲过一点，如果你要使用一些ES6的新语法，你需要引入ES6这个库，或者也可以写ES2015。 */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowJs": true,                       /* allowJs设置的值为true或false，用来指定是否允许编译JS文件，默认是false，即不编译JS文件。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "checkJs": true,                       /* checkJs的值为true或false，用来指定是否检查和报告JS文件中的错误，默认是false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"jsx\": \"preserve\",                     /* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "declaration": true,                   /* declaration的值为true或false，用来指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "declarationMap": true,                /* 值为true或false，指定是否为声明文件.d.ts生成map文件 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "sourceMap": true,                     /* sourceMap的值为true或false，用来指定编译时是否生成.map文件。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "outFile": "./",                       /* outFile用于指定将输出文件合并为一个文件，他的值为一个文件路径名，比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module\b的值为amd和system模块时才支持这个配置。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "outDir": "./",                        /* outDir用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "rootDir": "./",                       /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "composite": true,                     /* 是否编译构建引用项目 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "removeComments": true,                /* removeComments值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话即删掉注释，默认为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noEmit": true,                        /* 不生成编译文件，这个一般很少用了。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "importHelpers": true,                 /* importHelpers的值为true或false，指定是否引入tslib里的辅助工具函数，默认为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "downlevelIteration": true,            /* 当target为“ES5”或“ES3”时，为“for-of”、“spread”和“destructuring”中的迭代器提供完全支持。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "isolatedModules": true,               /* isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，他不可以和declaration同时设定。 */')]),t._v("\n\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Strict Type-Checking Options */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strict": true,                           /* strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitAny": true,                 /* noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any类型，如果将noImplicitAny设为true，则如果没有设置明确的类型会报错，默认值为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictNullChecks": true,              /* strictNullChecks的值为true或false，这个配置项我们在前面课程讲过了，当设为true时，null和undefined值不能赋值给非这两种类型的值，别的类型的值也不能赋给他们， 除了any类型，还有个例外就是undefined可以赋值给void类型。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictFunctionTypes": true,           /* strictFunctionTypes的值为true或false，用来指定是否使用函数参数双向协变检查。还记得我们讲类型兼容性的时候讲过函数参数双向协变的这个例子： */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictBindCallApply": true,           /* strictBindCallApply的值为true或false，设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictPropertyInitialization": true,  /* strictPropertyInitialization的值为true或false，设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitThis": true,                /* 当 this表达式的值为 any类型的时候，生成一个错误。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "alwaysStrict": true,                  /* alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的JS文件中加入"use strict"字符串，用来告诉浏览器该JS为严格模式。 */')]),t._v("\n\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Additional Checks */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedLocals": true,                /* noUnusedLocals的值为true或false，用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用ESLint可以在你书写代码的时候做提示，你可以配合使用。他的默认值为false */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedParameters": true,            /* noUnusedParameters的值为true或false，用于检查是否有在函数体中没有使用的参数，这个也可以配合ESLint来做检查，他默认是false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitReturns": true,             /* noImplicitReturns的值为true或false，用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noFallthroughCasesInSwitch": true,    /* noFallthroughCasesInSwitch的值为true或false，用于检查switch中是否有case没有使用break跳出switch，默认为false。 */')]),t._v("\n\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Module Resolution Options */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "moduleResolution": "node",            /* moduleResolution用于选择模块解析策略，有"node"和"classic"两种类型，我们在讲模块解析的时候已经讲过了。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "baseUrl": ".",                       /* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "paths": {')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "*": ["node_modules/@types", "src/typings"]')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// },                           /* paths用于设置模块名到基于baseUrl的路径映射 */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "rootDirs": [')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "src/module",')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "src/core"')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ],                        /* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径中的内容都放到一个文件夹中. */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "typeRoots": [],                       /* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "types": [],                           /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowSyntheticDefaultImports": true,  /* allowSyntheticDefaultImports的值为true或false，用来指定允许从没有默认导出的模块中默认导入。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"esModuleInterop"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "preserveSymlinks": true,              /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */')]),t._v("\n\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Source Map Options */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "sourceRoot": "",                      /* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "mapRoot": "",                         /* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "inlineSourceMap": true,               /* inlineSourceMap值为true或false，指定是否将map文件的内容和js文件编译在一个同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后接base64字符串的形式插入在js文件底部。 */')]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "inlineSources": true,                 /* inlineSources的值是true或false，用于指定是否进一步将.ts文件的内容也包含到输出文件中。 */')]),t._v("\n\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Experimental Options */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"experimentalDecorators"')]),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* experimentalDecorators的值是true或false，用于指定是否启用实验性的装饰器特性 */")]),t._v("\n    "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "emitDecoratorMetadata": true,         /* emitDecoratorMetadata的值为true或false，用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件。如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "include": [], // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件。')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "exclude": [], // exclude表示要排除的、不编译的文件，他也可以指定一个列表，规则和include一样，可以是文件可以是文件夹，可以是相对路径或绝对路径，可以使用通配符。')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "extends": "", // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件.')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "compileOnSave": true // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中文件保存的时候，编辑器会根据tsconfig.json的配置重新生成文件，不过这个要编辑器支持。')]),t._v("\n  "),l("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "references": [] // 一个对象数组，指定要引用的项目')]),t._v("\n"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("选项")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")]),t._v(" "),l("th",[t._v("描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--allowJs")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("允许编译javascript文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--allowSyntheticDefaultImports")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('module === "system" 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext')]),t._v(" "),l("td",[t._v("允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--allowUnreachableCode")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不报告执行不到的代码错误。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--allowUnusedLabels")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不报告未使用的标签错误。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--alwaysStrict")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v('以严格模式解析并为每个源文件生成 "use strict"语句')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--baseUrl")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("解析非相对模块名的基准目录。查看 模块解析文档了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--charset")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('"utf8"')]),t._v(" "),l("td",[t._v("输入文件的字符集。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--checkJs")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("在 .js文件中报告错误。与 --allowJs配合使用。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--declaration -d")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("生成相应的 .d.ts文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--declarationDir")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("生成声明文件的输出路径。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--diagnostics")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("显示诊断信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--disableSizeLimit")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("禁用JavaScript工程体积大小的限制")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--emitBOM")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--emitDecoratorMetadata [1]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("给源码里的装饰器声明加上设计类型元数据。查看 issue #2577了解更多信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--experimentalDecorators [1]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("启用实验性的ES装饰器。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--extendedDiagnostics")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("显示详细的诊段信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--forceConsistentCasingInFileNames")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("禁止对同一个文件的不一致的引用。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--help -h")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("打印帮助信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--importHelpers")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("从 tslib 导入辅助工具函数（比如 __extends， __rest等）")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--inlineSourceMap")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--inlineSources")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--init")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("初始化TypeScript项目并创建一个 tsconfig.json文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--isolatedModules")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("将每个文件作为单独的模块（与“ts.transpileModule”类似）。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--jsx")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('"Preserve"')]),t._v(" "),l("td",[t._v('在 .tsx文件里支持JSX： "React"或 "Preserve"。查看 JSX。')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--jsxFactory")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('"React.createElement"')]),t._v(" "),l("td",[t._v("指定生成目标为react JSX时，使用的JSX工厂函数，比如 React.createElement或 h。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--lib")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string[]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("编译过程中需要引入的库文件的列表。 可能的值为： ► ES5 ► ES6 ► ES2015 ► ES7 ► ES2016 ► ES2017 ► ES2018 ► ESNext ► DOM ► DOM.Iterable ► WebWorker ► ScriptHost ► ES2015.Core ► ES2015.Collection ► ES2015.Generator ► ES2015.Iterable ► ES2015.Promise ► ES2015.Proxy ► ES2015.Reflect ► ES2015.Symbol ► ES2015.Symbol.WellKnown ► ES2016.Array.Include ► ES2017.object ► ES2017.Intl ► ES2017.SharedMemory ► ES2017.String ► ES2017.TypedArrays ► ES2018.Intl ► ES2018.Promise ► ES2018.RegExp ► ESNext.AsyncIterable ► ESNext.Array ► ESNext.Intl ► ESNext.Symbol  注意：如果--lib没有指定默认注入的库的列表。默认注入的库为： ► 针对于--target ES5：DOM，ES5，ScriptHost ► 针对于--target ES6：DOM，ES6，DOM.Iterable，ScriptHost")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--listEmittedFiles")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("打印出编译后生成文件的名字。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--listFiles")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("编译过程中打印文件名。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--locale")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("(platform specific)")]),t._v(" "),l("td",[t._v("显示错误信息时使用的语言，比如：en-us。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--mapRoot")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当 .map文件是在运行时指定的，并不同于 js文件的地址时使用这个标记。指定的路径会嵌入到 sourceMap里告诉调试器到哪里去找它们。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--maxNodeModuleJsDepth")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("number")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),l("td",[t._v("node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于 --allowJs。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--module -m")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('target === "ES6" ? "ES6" : "commonjs"')]),t._v(" "),l("td",[t._v('指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。 ► 只有 "AMD"和 "System"能和 --outFile一起使用。 ► "ES6"和 "ES2015"可使用在目标输出为 "ES5"或更低的情况下。')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--moduleResolution")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('module === "AMD" or "System" or "ES6" ? "Classic" : "Node"')]),t._v(" "),l("td",[t._v('决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--newLine")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("(platform specific)")]),t._v(" "),l("td",[t._v('当生成文件时指定行结束符： "crlf"（windows）或 "lf"（unix）。')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noEmit")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不生成输出文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noEmitHelpers")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不在输出文件中生成用户自定义的帮助函数代码，如 __extends。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noEmitOnError")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("报错时不生成输出文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noErrorTruncation")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不截短错误消息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noFallthroughCasesInSwitch")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noImplicitAny")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("在表达式和声明上有隐含的 any类型时报错。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noImplicitReturns")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不是函数的所有返回路径都有返回值时报错。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noImplicitThis")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("当 this表达式的值为 any类型的时候，生成一个错误。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noImplicitUseStrict")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v('模块输出中不包含 "use strict"指令。')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noLib")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不包含默认的库文件（ lib.d.ts）。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noResolve")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不把 /// <reference``>或模块导入的文件加到编译文件列表。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noStrictGenericChecks")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("禁用在函数类型里对泛型签名进行严格检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noUnusedLocals")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("若有未使用的局部变量则抛错。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--noUnusedParameters")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("若有未使用的参数则抛错。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--out")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("弃用。使用 --outFile 代替。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--outDir")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("重定向输出目录。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--outFile")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和 ///<reference``>和 import的文件顺序决定的。查看输出文件顺序文件了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("paths [2]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("Object")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("模块名到基于 baseUrl的路径映射的列表。查看 模块解析文档了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--preserveConstEnums")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("保留 const和 enum声明。查看 const enums documentation了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--preserveSymlinks")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--preserveWatchOutput")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("保留watch模式下过时的控制台输出。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--pretty [1]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("给错误和消息设置样式，使用颜色和上下文。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--project -p")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("编译指定目录下的项目。这个目录应该包含一个 tsconfig.json文件来管理编译。查看 tsconfig.json文档了解更多信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--reactNamespace")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('"React"')]),t._v(" "),l("td",[t._v('当目标为生成 "react" JSX时，指定 createElement和 __spread的调用对象')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--removeComments")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("删除所有注释，除了以 /!*开头的版权信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--rootDir")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("(common root directory is computed from the list of input files)")]),t._v(" "),l("td",[t._v("仅用来控制输出的目录结构 --outDir。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("rootDirs [2]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string[]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("根（root）文件夹列表，表示运行时组合工程结构的内容。查看 模块解析文档了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--skipDefaultLibCheck")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("忽略 库的默认声明文件的类型检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--skipLibCheck")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("忽略所有的声明文件（ *.d.ts）的类型检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--sourceMap")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("生成相应的 .map文件。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--sourceRoot")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到 sourceMap里。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--strict")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("启用所有严格类型检查选项。 启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--strictFunctionTypes")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("禁用函数参数双向协变检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--strictPropertyInitialization")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--strictNullChecks")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--stripInternal [1]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("不对具有 /** @internal */ JSDoc注解的代码生成代码。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--suppressExcessPropertyErrors [1]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("阻止对对象字面量的额外属性检查。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--suppressImplicitAnyIndexErrors")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("阻止 --noImplicitAny对缺少索引签名的索引对象报错。查看 issue #1232了解详情。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--target -t")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v('"ES3"')]),t._v(" "),l("td",[t._v('指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。  注意： "ESNext"最新的生成目标列表为 ES proposed features')])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--traceResolution")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("false")]),t._v(" "),l("td",[t._v("生成模块解析日志信息")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--types")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string[]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("要包含的类型声明文件名列表。查看 @types，--typeRoots和--types章节了解详细信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--typeRoots")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("string[]")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("要包含的类型声明文件路径列表。查看 @types，--typeRoots和--types章节了解详细信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--version -v")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("打印编译器版本号。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("--watch -w")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",{staticStyle:{"text-align":"left"}}),t._v(" "),l("td",[t._v("在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。详情请看配置 Watch。")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);