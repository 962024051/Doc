(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{453:function(t,v,_){"use strict";_.r(v);var a=_(42),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"symbol"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" "),_("strong",[t._v("symbol")])]),t._v(" "),_("p",[t._v("基本数据类型，每个从"),_("code",[t._v("Symbol()")]),t._v("返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Symbol([description])\n")])])]),_("table",[_("thead",[_("tr",[_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("description(可选)")]),t._v(" "),_("td",[t._v("字符串类型")])])])]),t._v(" "),_("h2",{attrs:{id:"迭代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#迭代"}},[t._v("#")]),t._v(" 迭代")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Symbol")]),t._v(" "),_("th",[t._v("调用函数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Symbol.iterator")]),t._v(" "),_("td",[t._v("for...of")]),t._v(" "),_("td",[t._v("返回一个对象默认迭代器的方法")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.asyncIterator")]),t._v(" "),_("td",[t._v("for await of")]),t._v(" "),_("td",[t._v("返回对象默认的异步迭代器的方法")])])])]),t._v(" "),_("h2",{attrs:{id:"正则表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Symbol")]),t._v(" "),_("th",[t._v("调用函数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Symbol.match")]),t._v(" "),_("td",[t._v("String.prototype.match()")]),t._v(" "),_("td",[t._v("匹配的是正则表达式而不是字符串")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.replace")]),t._v(" "),_("td",[t._v("String.prototype.replace()")]),t._v(" "),_("td",[t._v("字符串替换所匹配字符串时所调用的方法")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.search")]),t._v(" "),_("td",[t._v("String.prototype.search()")]),t._v(" "),_("td",[t._v("返回一个字符串中与正则表达式相匹配的索引的方法")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.split")]),t._v(" "),_("td",[t._v("String.prototype.split()")]),t._v(" "),_("td",[t._v("匹配正则表达式的索引处拆分一个字符串的方法")])])])]),t._v(" "),_("h2",{attrs:{id:"验证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[t._v("#")]),t._v(" 验证")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Symbol")]),t._v(" "),_("th",[t._v("调用函数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Symbol.hasInstance")]),t._v(" "),_("td",[t._v("instanceof")]),t._v(" "),_("td",[t._v("判断某对象是否为某构造器的实例")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.isConcatSpreadable")]),t._v(" "),_("td",[t._v("Array.prototype.concat()")]),t._v(" "),_("td",[t._v("一个对象是否应该flattened为它的数组元素")])])])]),t._v(" "),_("h2",{attrs:{id:"其他symbol"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他symbol"}},[t._v("#")]),t._v(" 其他Symbol")]),t._v(" "),_("h3",{attrs:{id:"symbol-unscopables"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#symbol-unscopables"}},[t._v("#")]),t._v(" Symbol.unscopables")]),t._v(" "),_("p",[t._v("拥有和继承属性名的一个对象的值被排除在与环境绑定的相关对象外")]),t._v(" "),_("h3",{attrs:{id:"symbol-species"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#symbol-species"}},[t._v("#")]),t._v(" Symbol.species")]),t._v(" "),_("p",[t._v("允许子类覆盖对象的默认构造函数")]),t._v(" "),_("h3",{attrs:{id:"symbol-toprimitive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[t._v("#")]),t._v(" Symbol.toPrimitive")]),t._v(" "),_("p",[t._v("一个将对象转化为基本数据类型的方法")]),t._v(" "),_("h3",{attrs:{id:"symbol-tostringtag"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#symbol-tostringtag"}},[t._v("#")]),t._v(" Symbol.toStringTag")]),t._v(" "),_("p",[t._v("用于对象的默认描述的字符串值。被 Object.prototype.toString() 使用")]),t._v(" "),_("h2",{attrs:{id:"静态方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),_("h3",{attrs:{id:"for"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[t._v("#")]),t._v(" for()")]),t._v(" "),_("p",[t._v("根据给定的键 "),_("code",[t._v("key")]),t._v("，来从运行时的 symbol 注册表中找到对应的 symbol，如果找到了，则返回它，否则，新建一个与该键关联的 symbol，并放入全局 symbol 注册表中")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Symbol.for(key);\n")])])]),_("table",[_("thead",[_("tr",[_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("key")]),t._v(" "),_("td",[t._v("字符串")])]),t._v(" "),_("tr",[_("td",[t._v("返回值")]),t._v(" "),_("td",[t._v("返回由给定的 key 找到的 symbol，否则就是返回新创建的 symbol")])])])]),t._v(" "),_("h3",{attrs:{id:"keyfor"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keyfor"}},[t._v("#")]),t._v(" keyFor()")]),t._v(" "),_("p",[t._v("获取全局symbol 注册表中与某个 symbol 关联的键")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Symbol.keyFor(sym);\n")])])]),_("table",[_("thead",[_("tr",[_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("sym")]),t._v(" "),_("td",[t._v("必选参数，需要查找键值的某个 Symbol")])]),t._v(" "),_("tr",[_("td",[t._v("返回值")]),t._v(" "),_("td",[t._v("如果全局注册表中查找到该symbol，则返回该symbol的key值，返回值为字符串类型。否则返回undefined")])])])]),t._v(" "),_("h2",{attrs:{id:"实例属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[t._v("#")]),t._v(" 实例属性")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("实例属性")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Symbol.prototype.description")]),t._v(" "),_("td",[t._v("一个包含symbol描述的只读字符串。")])])])]),t._v(" "),_("h2",{attrs:{id:"实例方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("实例方法")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Symbol.prototype.toSource()")]),t._v(" "),_("td",[t._v("返回包含Symbol 对象源码的字符串")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.prototype.toString()")]),t._v(" "),_("td",[t._v("返回包含Symbol描述符的字符串")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.prototype.valueOf()")]),t._v(" "),_("td",[t._v("返回 Symbol 对象的初始值.")])]),t._v(" "),_("tr",[_("td",[t._v("Symbol.prototype[@@toPrimitive]")]),t._v(" "),_("td",[t._v("返回Symbol对象的初始值。")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);