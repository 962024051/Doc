(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{439:function(e,n,t){"use strict";t.r(n);var a=t(42),l=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"sequelize-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sequelize-cli"}},[e._v("#")]),e._v(" Sequelize-CLI")]),e._v(" "),t("h2",{attrs:{id:"依赖包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖包"}},[e._v("#")]),e._v(" 依赖包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm init egg\nnpm i\nnpm install --save egg-sequelize mysql2\nnpm install --save-dev sequelize-cli\n")])])]),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  config.sequelize = {\n    dialect: 'mysql', // 表示使用mysql\n    host: '127.0.0.1', // 连接的数据库主机地址\n    port: 3306, // mysql服务端口\n    database: 'egg_mysql_development', // 数据库名\n    username: 'root', // 数据库用户名\n    password: '123456', // 数据库密码\n    timezone: '+8:00', // 由于orm用的UTC时间，这里必须加上东八区，否则取出来的时间相差8小时\n    define: {  // model的全局配置\n      timestamps: false,   // 添加create,update,delete时间戳\n      freezeTableName: false,  // 防止修改表名为复数\n      underscored: false  // 防止驼峰式字段被默认转为下划线\n    },\n    dialectOptions: { // 让读取date类型数据时返回字符串而不是UTC时间\n      dateStrings: true,\n      typeCast(field, next) {\n        if(field.type === \"DATETIME\"){\n          return field.string();\n        }\n        return next();\n      }\n    }\n  };\n")])])]),t("h2",{attrs:{id:"命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[e._v("#")]),e._v(" 命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  sequelize init                              初始化项目\n  sequelize init:config                       初始化config\n  sequelize init:migrations                   初始化migrations\n  sequelize init:models                       初始化models\n  sequelize init:seeders                      初始化seeders\n\n  sequelize db:create                         创建数据库\n  sequelize db:drop                           删除数据库\n  \n  sequelize db:migrate                        运行挂起的迁移\n  sequelize db:migrate:schema:timestamps:add  \n  sequelize db:migrate:status                 列出所有迁移的状态\n  sequelize db:migrate:undo                   撤销上一次迁移\n  sequelize db:migrate:undo:all               撤销所有迁移 \n  sequelize db:migrate:undo --name xxx\t\t  撤销指定迁移\n  \n  sequelize db:seed                           运行指定种子文件\n  sequelize db:seed:undo                      删除指定文件\n  sequelize db:seed:all                       运行所有种子文件\n  sequelize db:seed:undo:all                  删除所有指定文件\n  \n  sequelize migration:generate                生成一个新migrate文件[aliases: migration:create]\n  sequelize model:generate                    生成一个新model文件[aliases: model:create]\n  sequelize seed:generate                     生成一个新seed文件[aliases: seed:create]\n\n\n")])])]),t("h2",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT('tiny')                // TINYTEXT\nSequelize.CITEXT                      // CITEXT      PostgreSQL and SQLite only.\n\nSequelize.INTEGER                     // INTEGER\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 10)               // FLOAT(11,10)\n\nSequelize.REAL                        // REAL        PostgreSQL only.\nSequelize.REAL(11)                    // REAL(11)    PostgreSQL only.\nSequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 10)              // DOUBLE(11,10)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nSequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nSequelize.DATEONLY                    // DATE without time.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'\nSequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.\nSequelize.ARRAY(Sequelize.ENUM)       // Defines an array of ENUM. PostgreSQL only.\n\nSequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.\nSequelize.JSONB                       // JSONB column. PostgreSQL only.\n\nSequelize.BLOB                        // BLOB (bytea for PostgreSQL)\nSequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)\n\nSequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)\n\nSequelize.CIDR                        // CIDR datatype for PostgreSQL\nSequelize.INET                        // INET datatype for PostgreSQL\nSequelize.MACADDR                     // MACADDR datatype for PostgreSQL\n\nSequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.\n\nSequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.\n")])])]),t("h2",{attrs:{id:"字段属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段属性"}},[e._v("#")]),e._v(" 字段属性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 迁移文件 设计数据表的\n{\n\tallowNull: false, // 是否允许为空\n\tautoIncrement: true, // 字段是否是自增类型\n\tprimaryKey: true, // 字段是否是主键\n\ttype: Sequelize.INTEGER // 字段是整型\n    defaultValue: null, // 字段默认值\n    unique: true, // 唯一索引\n    autoIncrement: true, //整数列\n    field: 'field_with_underscores'，//自定义列名称\n    comment: '这是带有注释的列', //注释列\n    //外键列\n    references: {\n      // 这是对另一个模型的参考\n      model: Bar,\n\n      // 这是引用模型的列名\n      key: 'id',\n\n      // 使用 PostgreSQL,可以通过 Deferrable 类型声明何时检查外键约束.\n      deferrable: Deferrable.INITIALLY_IMMEDIATE\n      // 参数:\n      // - `Deferrable.INITIALLY_IMMEDIATE` - 立即检查外键约束\n      // - `Deferrable.INITIALLY_DEFERRED` - 将所有外键约束检查推迟到事务结束\n      // - `Deferrable.NOT` - 完全不推迟检查(默认) - 这将不允许你动态更改事务中的规则\n    }\n}\n")])])])])}),[],!1,null,null,null);n.default=l.exports}}]);