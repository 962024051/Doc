(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{451:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h2",{attrs:{id:"函数定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[t._v("#")]),t._v(" 函数定义")]),t._v(" "),s("h3",{attrs:{id:"函数声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[t._v("#")]),t._v(" 函数声明")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function name([param[, param[, ... param]]]) { statements }\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("函数名")])]),t._v(" "),s("tr",[s("td",[t._v("param")]),t._v(" "),s("td",[t._v("函数参数")])]),t._v(" "),s("tr",[s("td",[t._v("statements")]),t._v(" "),s("td",[t._v("声明语句")])])])]),t._v(" "),s("h3",{attrs:{id:"函数表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[t._v("#")]),t._v(" 函数表达式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let function_expression = function [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n};\n\n\nlet 变量函数=function 函数名(参数1，参数2，参数3){\n\t函数体语句\n}\n")])])]),s("h3",{attrs:{id:"立即调用函数表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即调用函数表达式"}},[t._v("#")]),t._v(" 立即调用函数表达式")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    statements\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"函数生成器声明-function-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数生成器声明-function-语句"}},[t._v("#")]),t._v(" 函数生成器声明("),s("code",[t._v("function*")]),t._v(" 语句)")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function* name([param[, param[, ...param]]]) { statements }\n")])])]),s("h3",{attrs:{id:"函数生成器表达式-function-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数生成器表达式-function-表达式"}},[t._v("#")]),t._v(" 函数生成器表达式("),s("code",[t._v("function*")]),t._v("表达式)")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function* [name]([param] [, param] [..., param]) { statements }\n")])])]),s("h3",{attrs:{id:"箭头函数表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数表达式"}},[t._v("#")]),t._v(" 箭头函数表达式 (=>)")]),t._v(" "),s("h4",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(param1, param2, …, paramN) => { statements } \n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n\n// 当只有一个参数时，圆括号是可选的：\n(singleParam) => { statements }\nsingleParam => { statements }\n\n// 没有参数的函数应该写成一对圆括号。\n() => { statements }\n")])])]),s("h4",{attrs:{id:"高级语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级语法"}},[t._v("#")]),t._v(" 高级语法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//加括号的函数体返回对象字面量表达式：\nparams => ({foo: bar})\n\n//支持剩余参数和默认参数\n(param1, param2, ...rest) => { statements }\n(param1 = defaultValue1, param2, …, paramN = defaultValueN) => { \nstatements }\n\n//同样支持参数列表解构\nlet f = ([a, b] = [1, 2], {x: c} = {x: a + b}) => a + b + c;\nf();  // 6\n")])])]),s("h3",{attrs:{id:"function构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function构造函数"}},[t._v("#")]),t._v(" "),s("code",[t._v("Function")]),t._v("构造函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("new Function (arg1, arg2, ... argN, functionBody)\n")])])]),s("h3",{attrs:{id:"生成器函数的构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成器函数的构造函数"}},[t._v("#")]),t._v(" 生成器函数的构造函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("new GeneratorFunction (arg1, arg2, ... argN, functionBody)\n")])])]),s("h2",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),s("h4",{attrs:{id:"函数默认参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数默认参数"}},[t._v("#")]),t._v(" 函数默认参数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) { \n    statements \n}\n")])])]),s("h4",{attrs:{id:"剩余参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[t._v("#")]),t._v(" 剩余参数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("theArgs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"arguments对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments对象"}},[t._v("#")]),t._v(" "),s("code",[t._v("arguments")]),t._v("对象")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("arguments")]),t._v(": 一个包含了传递给当前执行函数参数的类似于数组的对象。")]),t._v(" "),s("li",[s("code",[t._v("arguments.callee")]),t._v(" : 当前正在执行的函数。")]),t._v(" "),s("li",[s("code",[t._v("arguments.caller")]),t._v(" : 调用当前执行函数的函数。")]),t._v(" "),s("li",[s("code",[t._v("arguments.length")]),t._v(": 传给函数的参数的数目。")])]),t._v(" "),s("h2",{attrs:{id:"方法函数定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法函数定义"}},[t._v("#")]),t._v(" 方法函数定义")]),t._v(" "),s("h3",{attrs:{id:"getter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getter"}},[t._v("#")]),t._v(" Getter")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{get prop() { ... } }\n{get [expression]() { ... } }\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("prop")]),t._v(" "),s("td",[t._v("函数的属性名")])]),t._v(" "),s("tr",[s("td",[t._v("expression")]),t._v(" "),s("td",[t._v("算属性名的表达式绑定到给定的函数")])])])]),t._v(" "),s("h3",{attrs:{id:"setter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setter"}},[t._v("#")]),t._v(" Setter")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{set prop(val) { . . . }}\n{set [expression](val) { . . . }}\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("prop")]),t._v(" "),s("td",[t._v("函数的属性名")])]),t._v(" "),s("tr",[s("td",[t._v("val")]),t._v(" "),s("td",[t._v("值")])]),t._v(" "),s("tr",[s("td",[t._v("expression")]),t._v(" "),s("td",[t._v("算属性名的表达式绑定到给定的函数")])])])]),t._v(" "),s("h3",{attrs:{id:"方法定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法定义"}},[t._v("#")]),t._v(" 方法定义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var obj = {\n  get property() {},\n  set property(value) {},\n  property( parameters… ) {},\n  *generator( parameters… ) {},\n  async property( parameters… ) {},\n  async* generator( parameters… ) {},\n\n  // 属性名自动计算\n  get [property]() {},\n  set [property](value) {},\n  [property]( parameters… ) {},\n  *[generator]( parameters… ) {},\n  async [property]( parameters… ) {},\n  async* [generator]( parameters… ) {},\n};\n")])])]),s("h2",{attrs:{id:"块级函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块级函数"}},[t._v("#")]),t._v(" 块级函数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f() === 2 in non-strict mode")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);