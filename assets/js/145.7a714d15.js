(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{497:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("h2",{attrs:{id:"普通类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通类"}},[t._v("#")]),t._v(" 普通类")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 类名  {\n\t属性名：数据类型;\n\tconstructor(参数名：参数数据类型){\n\t\t构造初始化语句\n\t}\n\t方法名(){\n\t  执行语句\n\t}\n}\n")])])]),s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 父类  {\n}\n\nclass 子类名 extends 父类{\n}\n")])])]),s("h2",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 类名  {\n\t//自由的访问程序里定义的成员\n\tpublic 属性名：数据类型;\n\t//不能在声明它的类的外部访问\n\tprivate  属性名：数据类型;\n\t//只能在当前类型访问\n\tprotected  属性名：数据类型;\n\t//只读属性必须在声明时或构造函数里被初始化\n\treadonly 属性名：数据类型;\n}\n")])])]),s("h2",{attrs:{id:"存取器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[t._v("#")]),t._v(" 存取器")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 类名  {\n\tprivate _属性: 数据类型;\n\n    get 方法(): 数据类型 {\n        return this._属性;\n    }\n\n    set 方法(参数: 数据类型) {\n            this._属性 = 参数;\n    }\n}\n")])])]),s("h2",{attrs:{id:"静态属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[t._v("#")]),t._v(" 静态属性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 类名  {\n\tstatic  属性名：数据类型;\n}\n")])])]),s("h2",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),s("p",[t._v("抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abstract class 类名 {\n    abstract 方法(): 返回数据类型;\n    方法(): 返回数据类型 {\n        执行语句\n    }\n}\n")])])]),s("h2",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 类名 {\n    属性: 数据类型;\n    constructor(参数: 数据类型) {\n        this.属性 = 参数;\n    }\n    方法() {\n        return this.属性;\n    }\n}\n\n声明 变量: 类=new 类构造器(实参);\nconsole.log(变量.方法());\n")])])]),s("h2",{attrs:{id:"类接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类接口"}},[t._v("#")]),t._v(" 类接口")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class 基类 {\n    属性: 数据类型;\n    属性: 数据类型;\n}\n\ninterface 派生类 extends 基类 {\n    属性: 数据类型;\n}\n\nlet 变量: 派生类 = {x: 1, y: 2, z: 3};\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);