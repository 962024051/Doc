(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{359:function(v,_,t){"use strict";t.r(_);var a=t(42),l=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"宏观游览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏观游览器"}},[v._v("#")]),v._v(" 宏观游览器")]),v._v(" "),t("h2",{attrs:{id:"进程和线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),t("h3",{attrs:{id:"并行处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行处理"}},[v._v("#")]),v._v(" 并行处理")]),v._v(" "),t("p",[v._v("计算机中的并行处理就是同一时刻处理多个任务")]),v._v(" "),t("h3",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[v._v("#")]),v._v(" 线程")]),v._v(" "),t("p",[v._v("可以并行处理任务，但是线程是不能单独存在的，它是由进程来启动和管理的")]),v._v(" "),t("h3",{attrs:{id:"进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[v._v("#")]),v._v(" 进程")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("一个进程就是一个程序的运行实例")])]),v._v(" "),t("li",[t("p",[v._v("启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程。")])]),v._v(" "),t("li",[t("p",[v._v("一个进程可以有多个线程")])])]),v._v(" "),t("h3",{attrs:{id:"进程vs线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程vs线程"}},[v._v("#")]),v._v(" 进程vs线程")]),v._v(" "),t("ol",[t("li",[v._v("进程中的任意一线程执行出错，都会导致整个进程的崩溃")]),v._v(" "),t("li",[v._v("线程之间共享进程中的数据")]),v._v(" "),t("li",[v._v("当一个进程关闭之后，操作系统会回收进程所占用的内存")]),v._v(" "),t("li",[v._v("进程之间的内容相互隔离")])]),v._v(" "),t("h2",{attrs:{id:"游览器进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#游览器进程"}},[v._v("#")]),v._v(" 游览器进程")]),v._v(" "),t("h3",{attrs:{id:"单进程游览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单进程游览器"}},[v._v("#")]),v._v(" 单进程游览器")]),v._v(" "),t("p",[v._v("浏览器的所有功能模块都是运行在同一个进程里，俗称单进程游览器")]),v._v(" "),t("h3",{attrs:{id:"多进程游览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多进程游览器"}},[v._v("#")]),v._v(" 多进程游览器")]),v._v(" "),t("h4",{attrs:{id:"浏览器进程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程。"}},[v._v("#")]),v._v(" 浏览器进程。")]),v._v(" "),t("p",[v._v("负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),v._v(" "),t("h4",{attrs:{id:"渲染进程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程。"}},[v._v("#")]),v._v(" 渲染进程。")]),v._v(" "),t("p",[v._v("核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),v._v(" "),t("h4",{attrs:{id:"gpu-进程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gpu-进程。"}},[v._v("#")]),v._v(" GPU 进程。")]),v._v(" "),t("p",[v._v("Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),v._v(" "),t("h4",{attrs:{id:"网络进程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络进程。"}},[v._v("#")]),v._v(" 网络进程。")]),v._v(" "),t("p",[v._v("主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),v._v(" "),t("h4",{attrs:{id:"插件进程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件进程。"}},[v._v("#")]),v._v(" 插件进程。")]),v._v(" "),t("p",[v._v("主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")]),v._v(" "),t("h2",{attrs:{id:"tcp-vs-udp-vs-ip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-vs-udp-vs-ip"}},[v._v("#")]),v._v(" TCP vs UDP vs IP")]),v._v(" "),t("ul",[t("li",[v._v("IP：把数据包送达目的主机\n"),t("ul",[t("li",[v._v("计算机的地址就称为IP地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息")])])]),v._v(" "),t("li",[v._v("UDP：把数据包送达应用程序\n"),t("ul",[t("li",[v._v("只负责把数据包传送到对方电脑，但是对方电脑并不知道把数据包交给哪个程序")])])]),v._v(" "),t("li",[v._v("TCP：把数据完整地送达应用程序")]),v._v(" "),t("li",[v._v("数据包在传输过程中容易丢失；")]),v._v(" "),t("li",[v._v("大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而UDP协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件")]),v._v(" "),t("li",[v._v("对于数据包丢失的情况，TCP提供重传机制；")]),v._v(" "),t("li",[v._v("TCP引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件")])]),v._v(" "),t("h2",{attrs:{id:"http请求流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http请求流程"}},[v._v("#")]),v._v(" HTTP请求流程")]),v._v(" "),t("ul",[t("li",[v._v("构建网络请求")]),v._v(" "),t("li",[v._v("查找游览器缓存\n"),t("ul",[t("li",[v._v("通过游览器本地缓存查找页面资源和DNS缓存")])])]),v._v(" "),t("li",[v._v("准备IP地址和端口")]),v._v(" "),t("li",[v._v("等待TCP队列\n"),t("ul",[t("li",[v._v("Chrome游览器，在同一个域名下只能建立6个TCP链接，超过链接需要排队等待")])])]),v._v(" "),t("li",[v._v("建立TCP链接")]),v._v(" "),t("li",[v._v("发送HTTP请求\n"),t("ul",[t("li",[v._v("请求行 -- 请求方法 请求url http协议版本")]),v._v(" "),t("li",[v._v("请求头")]),v._v(" "),t("li",[v._v("请求体")])])]),v._v(" "),t("li",[v._v("服务器处理请求\n"),t("ul",[t("li",[v._v("响应行 -- http协议版本 状态码")]),v._v(" "),t("li",[v._v("响应头")]),v._v(" "),t("li",[v._v("响应体")])])]),v._v(" "),t("li",[v._v("断开TCP链接")]),v._v(" "),t("li",[v._v("重定向\n"),t("ul",[t("li",[v._v("响应头中有Location字段  就是重定向url链接")])])])]),v._v(" "),t("h2",{attrs:{id:"输入url地址到页面渲染过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入url地址到页面渲染过程"}},[v._v("#")]),v._v(" 输入url地址到页面渲染过程")]),v._v(" "),t("ul",[t("li",[v._v("用户输入url并回车")]),v._v(" "),t("li",[v._v("浏览器进程检查url，组装协议，构成完整的url")]),v._v(" "),t("li",[v._v("浏览器进程通过进程间通信（IPC）把url请求发送给网络进程")]),v._v(" "),t("li",[v._v("网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程")]),v._v(" "),t("li",[v._v("如果没有，网络进程向web服务器发起http请求（网络请求），请求流程如下：\n"),t("ul",[t("li",[v._v("进行DNS解析，获取服务器ip地址，端口（端口是通过dns解析获取的吗？这里有个疑问）")]),v._v(" "),t("li",[v._v("利用ip地址和服务器建立tcp连接")]),v._v(" "),t("li",[v._v("构建请求头信息")]),v._v(" "),t("li",[v._v("发送请求头信息")]),v._v(" "),t("li",[v._v("服务器响应后，网络进程接收响应头和响应信息，并解析响应内容")])])]),v._v(" "),t("li",[v._v("网络进程解析响应流程；\n"),t("ul",[t("li",[v._v("检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第4步 （301/302跳转也会读取本地缓存吗？这里有个疑问），如果是200，则继续处理请求。")]),v._v(" "),t("li",[v._v("200响应处理：检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是html则通知浏览器进程准备渲染进程准备进行渲染。")])])]),v._v(" "),t("li",[v._v("准备渲染进程\n"),t("ul",[t("li",[v._v("浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程")])])]),v._v(" "),t("li",[v._v("传输数据、更新状态\n"),t("ul",[t("li",[v._v("渲染进程准备好后，浏览器向渲染进程发起“提交文档”的消息，渲染进程接收到消息和网络进程建立传输数据的“管道”")]),v._v(" "),t("li",[v._v("渲染进程接收完数据后，向浏览器发送“确认提交”")]),v._v(" "),t("li",[v._v("浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web页面")])])])]),v._v(" "),t("h2",{attrs:{id:"渲染流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[v._v("#")]),v._v(" 渲染流程")]),v._v(" "),t("p",[v._v("渲染流程，从HTML到DOM、样式计算、布局、图层、绘制、光栅化、合成和显示")]),v._v(" "),t("ul",[t("li",[v._v("渲染进程将HTML内容转换为能够读懂的DOM树结构。")]),v._v(" "),t("li",[v._v("渲染引擎将CSS样式表转化为浏览器可以理解的styleSheets，计算出DOM节点的样式。")]),v._v(" "),t("li",[v._v("创建布局树，并计算元素的布局信息。")]),v._v(" "),t("li",[v._v("对布局树进行分层，并生成分层树。")]),v._v(" "),t("li",[v._v("为每个图层生成绘制列表，并将其提交到合成线程。")]),v._v(" "),t("li",[v._v("合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。")]),v._v(" "),t("li",[v._v("合成线程发送绘制图块命令DrawQuad给浏览器进程。")]),v._v(" "),t("li",[v._v("浏览器进程根据DrawQuad消息生成页面，并显示到显示器上")])])])}),[],!1,null,null,null);_.default=l.exports}}]);